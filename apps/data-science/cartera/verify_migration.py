#!/usr/bin/env python3
"""
Script de verificaci√≥n de integridad de la migraci√≥n
Compara el checklist original vs los datos migrados
"""

import sqlite3
import json
import pandas as pd
from collections import defaultdict

class MigrationVerifier:
    def __init__(self, sqlite_file, checklist_file, excel_file):
        self.sqlite_file = sqlite_file
        self.checklist_file = checklist_file
        self.excel_file = excel_file
        self.conn = None
        self.checklist = None
        
    def load_resources(self):
        """Carga recursos necesarios para verificaci√≥n"""
        # Cargar checklist
        with open(self.checklist_file, 'r', encoding='utf-8') as f:
            self.checklist = json.load(f)
        
        # Conectar a SQLite
        self.conn = sqlite3.connect(self.sqlite_file)
        print(f"‚úÖ Recursos cargados")
        
    def verify_database_structure(self):
        """Verifica la estructura de la base de datos"""
        print("\nüîç VERIFICANDO ESTRUCTURA DE LA BASE DE DATOS")
        print("=" * 60)
        
        # Obtener informaci√≥n de la tabla
        cursor = self.conn.execute("PRAGMA table_info(cartera_universal)")
        db_columns = {row[1]: row[2] for row in cursor.fetchall()}  # {nombre: tipo}
        
        print(f"üìä Columnas en base de datos: {len(db_columns)}")
        print(f"üìä Columnas en checklist: {len(self.checklist['columns'])}")
        
        # Verificar si todas las columnas del checklist est√°n en la BD
        missing_columns = []
        extra_columns = []
        
        # Columnas del checklist vs BD (excluyendo meta campos)
        meta_columns = {'id', 'sheet_name', 'row_index', 'migration_timestamp'}
        checklist_normalized = set()
        
        # Cargar mapeos si existen
        try:
            with open('column_mappings.json', 'r', encoding='utf-8') as f:
                column_mappings = json.load(f)
            print(f"üìã Mapeos de columnas cargados: {len(column_mappings)}")
            checklist_normalized = set(column_mappings.values())
        except FileNotFoundError:
            print("‚ö†Ô∏è  No se encontraron mapeos de columnas")
            return False
        
        db_data_columns = set(db_columns.keys()) - meta_columns
        
        missing_in_db = checklist_normalized - db_data_columns
        extra_in_db = db_data_columns - checklist_normalized
        
        print(f"\nüìã Resultados de verificaci√≥n:")
        print(f"   ‚úÖ Columnas correctamente migradas: {len(checklist_normalized & db_data_columns)}")
        
        if missing_in_db:
            print(f"   ‚ùå Columnas faltantes en BD: {len(missing_in_db)}")
            for col in list(missing_in_db)[:10]:  # Mostrar solo las primeras 10
                print(f"      - {col}")
        else:
            print(f"   ‚úÖ Todas las columnas del checklist est√°n en la BD")
            
        if extra_in_db:
            print(f"   ‚ö†Ô∏è  Columnas extra en BD: {len(extra_in_db)}")
            for col in list(extra_in_db)[:10]:
                print(f"      - {col}")
        
        return len(missing_in_db) == 0
    
    def verify_data_counts(self):
        """Verifica conteos de datos por hoja"""
        print("\nüìä VERIFICANDO CONTEOS DE DATOS")
        print("=" * 60)
        
        # Conteos por hoja en la BD
        cursor = self.conn.execute("""
            SELECT sheet_name, COUNT(*) as row_count 
            FROM cartera_universal 
            GROUP BY sheet_name 
            ORDER BY sheet_name
        """)
        
        db_counts = {row[0]: row[1] for row in cursor.fetchall()}
        
        print(f"üìã Hojas en base de datos: {len(db_counts)}")
        
        # Comparar con Excel (muestreo de algunas hojas)
        print(f"\nüìä Conteos por hoja (top 10):")
        sorted_sheets = sorted(db_counts.items(), key=lambda x: x[1], reverse=True)
        
        for sheet_name, count in sorted_sheets[:10]:
            print(f"   {sheet_name:<30}: {count:>6} filas")
        
        total_rows = sum(db_counts.values())
        print(f"\nüìä Total de filas migradas: {total_rows}")
        
        return db_counts
    
    def verify_sample_data(self):
        """Verifica integridad de datos de muestra"""
        print("\nüîç VERIFICANDO INTEGRIDAD DE DATOS DE MUESTRA")
        print("=" * 60)
        
        # Tomar muestra de cada hoja con datos
        cursor = self.conn.execute("""
            SELECT sheet_name, COUNT(*) as row_count 
            FROM cartera_universal 
            GROUP BY sheet_name 
            HAVING row_count > 0
            ORDER BY row_count DESC 
            LIMIT 5
        """)
        
        sample_sheets = cursor.fetchall()
        
        for sheet_name, row_count in sample_sheets:
            print(f"\nüìã Verificando hoja: {sheet_name} ({row_count} filas)")
            
            # Obtener muestra de la BD
            cursor = self.conn.execute("""
                SELECT * FROM cartera_universal 
                WHERE sheet_name = ? 
                LIMIT 3
            """, (sheet_name,))
            
            sample_rows = cursor.fetchall()
            if sample_rows:
                print(f"   ‚úÖ Primeras 3 filas encontradas en BD")
                
                # Verificar que no todos los campos est√©n vac√≠os
                non_null_count = 0
                for row in sample_rows:
                    non_null_count += sum(1 for val in row[4:] if val is not None)  # Skip meta campos
                
                print(f"   ‚úÖ {non_null_count} valores no nulos en muestra")
            else:
                print(f"   ‚ùå No se encontraron datos para {sheet_name}")
    
    def generate_verification_report(self):
        """Genera reporte completo de verificaci√≥n"""
        print("\nüìù GENERANDO REPORTE DE VERIFICACI√ìN")
        print("=" * 60)
        
        # Estad√≠sticas generales
        cursor = self.conn.execute("SELECT COUNT(*) FROM cartera_universal")
        total_rows = cursor.fetchone()[0]
        
        cursor = self.conn.execute("SELECT COUNT(DISTINCT sheet_name) FROM cartera_universal")
        unique_sheets = cursor.fetchone()[0]
        
        cursor = self.conn.execute("PRAGMA table_info(cartera_universal)")
        total_columns = len(cursor.fetchall())
        
        # Verificar columnas con m√°s datos
        cursor = self.conn.execute("PRAGMA table_info(cartera_universal)")
        columns = [row[1] for row in cursor.fetchall() if row[1] not in ['id', 'sheet_name', 'row_index', 'migration_timestamp']]
        
        column_stats = {}
        for col in columns[:20]:  # Solo primeras 20 por rendimiento
            try:
                cursor = self.conn.execute(f"SELECT COUNT(*) FROM cartera_universal WHERE {col} IS NOT NULL")
                non_null_count = cursor.fetchone()[0]
                column_stats[col] = non_null_count
            except:
                column_stats[col] = 0
        
        # Crear reporte
        report = {
            'verification_timestamp': pd.Timestamp.now().isoformat(),
            'source_checklist': self.checklist_file,
            'target_database': self.sqlite_file,
            'summary': {
                'total_rows_migrated': total_rows,
                'total_sheets_migrated': unique_sheets,
                'total_columns_in_schema': total_columns,
                'checklist_columns': len(self.checklist['columns'])
            },
            'column_utilization': column_stats,
            'verification_status': 'COMPLETED'
        }
        
        # Guardar reporte
        with open('verification_report.json', 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ Reporte guardado en: verification_report.json")
        
        # Mostrar resumen
        print(f"\nüìä RESUMEN DE VERIFICACI√ìN:")
        print(f"   ‚úÖ Filas migradas: {total_rows:,}")
        print(f"   ‚úÖ Hojas migradas: {unique_sheets}")
        print(f"   ‚úÖ Columnas en esquema: {total_columns}")
        print(f"   ‚úÖ Columnas del checklist: {len(self.checklist['columns'])}")
        
        # Top columnas con m√°s datos
        if column_stats:
            top_columns = sorted(column_stats.items(), key=lambda x: x[1], reverse=True)[:10]
            print(f"\nüìä Columnas con m√°s datos (top 10):")
            for col, count in top_columns:
                print(f"   {col:<40}: {count:>8} valores")
        
        return report
    
    def run_full_verification(self):
        """Ejecuta verificaci√≥n completa"""
        print("üîç INICIANDO VERIFICACI√ìN COMPLETA DE MIGRACI√ìN")
        print("=" * 80)
        
        try:
            self.load_resources()
            
            # Verificaciones paso a paso
            structure_ok = self.verify_database_structure()
            data_counts = self.verify_data_counts()
            self.verify_sample_data()
            report = self.generate_verification_report()
            
            print(f"\nüéâ VERIFICACI√ìN COMPLETADA")
            
            if structure_ok and report['summary']['total_rows_migrated'] > 0:
                print("‚úÖ Migraci√≥n exitosa - Sin p√©rdida de columnas")
                return True
            else:
                print("‚ö†Ô∏è  Migraci√≥n con advertencias - Revisar reporte")
                return False
                
        except Exception as e:
            print(f"‚ùå Error durante verificaci√≥n: {str(e)}")
            return False
        finally:
            if self.conn:
                self.conn.close()

if __name__ == "__main__":
    # Configuraci√≥n
    sqlite_file = "cartera_migrated.db"
    checklist_file = "column_checklist.json"
    excel_file = "cartera.xlsx"
    
    # Verificar que existan los archivos
    import os
    
    if not os.path.exists(sqlite_file):
        print(f"‚ùå Base de datos no encontrada: {sqlite_file}")
        print("   Ejecute primero: python migrate_to_sqlite.py")
        exit(1)
        
    if not os.path.exists(checklist_file):
        print(f"‚ùå Checklist no encontrado: {checklist_file}")
        exit(1)
    
    # Ejecutar verificaci√≥n
    verifier = MigrationVerifier(sqlite_file, checklist_file, excel_file)
    success = verifier.run_full_verification()
    
    if success:
        print(f"\n‚úÖ ¬°Verificaci√≥n exitosa! No se perdieron datos.")
    else:
        print(f"\n‚ö†Ô∏è  Verificaci√≥n con problemas. Revise los reportes generados.")