/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as GoalsRouteImport } from './routes/goals'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as IndexRouteImport } from './routes/index'
import { Route as GoalsIndexRouteImport } from './routes/goals/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as GoalsConfigureRouteImport } from './routes/goals/configure'
import { Route as AdminTeamsRouteImport } from './routes/admin/teams'
import { Route as AdminGoalTemplatesRouteImport } from './routes/admin/goal-templates'
import { Route as AdminDepartmentsRouteImport } from './routes/admin/departments'
import { Route as AdminAreasRouteImport } from './routes/admin/areas'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const GoalsRoute = GoalsRouteImport.update({
  id: '/goals',
  path: '/goals',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const GoalsIndexRoute = GoalsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => GoalsRoute,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)
const GoalsConfigureRoute = GoalsConfigureRouteImport.update({
  id: '/configure',
  path: '/configure',
  getParentRoute: () => GoalsRoute,
} as any)
const AdminTeamsRoute = AdminTeamsRouteImport.update({
  id: '/teams',
  path: '/teams',
  getParentRoute: () => AdminRoute,
} as any)
const AdminGoalTemplatesRoute = AdminGoalTemplatesRouteImport.update({
  id: '/goal-templates',
  path: '/goal-templates',
  getParentRoute: () => AdminRoute,
} as any)
const AdminDepartmentsRoute = AdminDepartmentsRouteImport.update({
  id: '/departments',
  path: '/departments',
  getParentRoute: () => AdminRoute,
} as any)
const AdminAreasRoute = AdminAreasRouteImport.update({
  id: '/areas',
  path: '/areas',
  getParentRoute: () => AdminRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/goals': typeof GoalsRouteWithChildren
  '/login': typeof LoginRoute
  '/admin/areas': typeof AdminAreasRoute
  '/admin/departments': typeof AdminDepartmentsRoute
  '/admin/goal-templates': typeof AdminGoalTemplatesRoute
  '/admin/teams': typeof AdminTeamsRoute
  '/goals/configure': typeof GoalsConfigureRoute
  '/admin/': typeof AdminIndexRoute
  '/goals/': typeof GoalsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/login': typeof LoginRoute
  '/admin/areas': typeof AdminAreasRoute
  '/admin/departments': typeof AdminDepartmentsRoute
  '/admin/goal-templates': typeof AdminGoalTemplatesRoute
  '/admin/teams': typeof AdminTeamsRoute
  '/goals/configure': typeof GoalsConfigureRoute
  '/admin': typeof AdminIndexRoute
  '/goals': typeof GoalsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/goals': typeof GoalsRouteWithChildren
  '/login': typeof LoginRoute
  '/admin/areas': typeof AdminAreasRoute
  '/admin/departments': typeof AdminDepartmentsRoute
  '/admin/goal-templates': typeof AdminGoalTemplatesRoute
  '/admin/teams': typeof AdminTeamsRoute
  '/goals/configure': typeof GoalsConfigureRoute
  '/admin/': typeof AdminIndexRoute
  '/goals/': typeof GoalsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/dashboard'
    | '/goals'
    | '/login'
    | '/admin/areas'
    | '/admin/departments'
    | '/admin/goal-templates'
    | '/admin/teams'
    | '/goals/configure'
    | '/admin/'
    | '/goals/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/login'
    | '/admin/areas'
    | '/admin/departments'
    | '/admin/goal-templates'
    | '/admin/teams'
    | '/goals/configure'
    | '/admin'
    | '/goals'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/dashboard'
    | '/goals'
    | '/login'
    | '/admin/areas'
    | '/admin/departments'
    | '/admin/goal-templates'
    | '/admin/teams'
    | '/goals/configure'
    | '/admin/'
    | '/goals/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  DashboardRoute: typeof DashboardRoute
  GoalsRoute: typeof GoalsRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/goals': {
      id: '/goals'
      path: '/goals'
      fullPath: '/goals'
      preLoaderRoute: typeof GoalsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/goals/': {
      id: '/goals/'
      path: '/'
      fullPath: '/goals/'
      preLoaderRoute: typeof GoalsIndexRouteImport
      parentRoute: typeof GoalsRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/goals/configure': {
      id: '/goals/configure'
      path: '/configure'
      fullPath: '/goals/configure'
      preLoaderRoute: typeof GoalsConfigureRouteImport
      parentRoute: typeof GoalsRoute
    }
    '/admin/teams': {
      id: '/admin/teams'
      path: '/teams'
      fullPath: '/admin/teams'
      preLoaderRoute: typeof AdminTeamsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/goal-templates': {
      id: '/admin/goal-templates'
      path: '/goal-templates'
      fullPath: '/admin/goal-templates'
      preLoaderRoute: typeof AdminGoalTemplatesRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/departments': {
      id: '/admin/departments'
      path: '/departments'
      fullPath: '/admin/departments'
      preLoaderRoute: typeof AdminDepartmentsRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/areas': {
      id: '/admin/areas'
      path: '/areas'
      fullPath: '/admin/areas'
      preLoaderRoute: typeof AdminAreasRouteImport
      parentRoute: typeof AdminRoute
    }
  }
}

interface AdminRouteChildren {
  AdminAreasRoute: typeof AdminAreasRoute
  AdminDepartmentsRoute: typeof AdminDepartmentsRoute
  AdminGoalTemplatesRoute: typeof AdminGoalTemplatesRoute
  AdminTeamsRoute: typeof AdminTeamsRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminAreasRoute: AdminAreasRoute,
  AdminDepartmentsRoute: AdminDepartmentsRoute,
  AdminGoalTemplatesRoute: AdminGoalTemplatesRoute,
  AdminTeamsRoute: AdminTeamsRoute,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

interface GoalsRouteChildren {
  GoalsConfigureRoute: typeof GoalsConfigureRoute
  GoalsIndexRoute: typeof GoalsIndexRoute
}

const GoalsRouteChildren: GoalsRouteChildren = {
  GoalsConfigureRoute: GoalsConfigureRoute,
  GoalsIndexRoute: GoalsIndexRoute,
}

const GoalsRouteWithChildren = GoalsRoute._addFileChildren(GoalsRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  DashboardRoute: DashboardRoute,
  GoalsRoute: GoalsRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
